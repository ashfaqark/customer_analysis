create database customer_analysis;

use database customer_analysis;

SELECT COUNT(*) FROM MARKETING_DATA;
SELECT COUNT(DISTINCT ID) FROM MARKETING_DATA; -- NO DUPLICATES

SHOW COLUMNS;

--deleing the null values
delete from marketing_data
where income is null;

SELECT * FROM MARKETING_DATA;

--What is the average income of customers?

SELECT ID, ROUND(AVG(INCOME),0)AS AVG_INCOME
FROM MARKETING_DATA
GROUP BY 1
ORDER BY 2 DESC;


--How many customers have complained in the last 2 years?

SELECT SUM(COMPLAIN) FROM MARKETING_DATA; --21

--What is the most common education level among customers? GRADUATION , 1116

SELECT EDUCATION, 
COUNT(EDUCATION)
FROM MARKETING_DATA
GROUP BY 1
ORDER BY 2 DESC;

--Calculate the average amount spent on each product category ('MntWines,' 'MntFruits,' etc.) over the last 2 years.



SELECT ROUND(AVG(MNTWINES),2),
ROUND(AVG(MNTFRUITS),2),
ROUND(AVG(MNTMEATPRODUCTS),2),
ROUND(AVG(MNTFISHPRODUCTS),2),
ROUND(AVG(MNTSWEETPRODUCTS),2),
ROUND(AVG(MNTGOLDPRODS),2)
FROM MARKETING_DATA;


--Identify the top 5 products that customers spent the most on.


WITH CTE AS (    
SELECT 'MntWines' AS PRODUCT, SUM(MntWines) AS Total FROM MARKETING_DATA
UNION
SELECT 'MntFruits' AS PRODUCT, SUM(MntFruits) AS Total FROM MARKETING_DATA
UNION
SELECT 'MntMeatProducts' AS PRODUCT, SUM(MntMeatProducts) AS Total FROM MARKETING_DATA
UNION
SELECT 'MntFishProducts' AS PRODUCT, SUM(MntFishProducts) AS Total FROM MARKETING_DATA
UNION
SELECT 'MntSweetProducts' AS PRODUCT, SUM(MntSweetProducts) AS Total FROM MARKETING_DATA
UNION
SELECT 'MntGoldProds' AS PRODUCT, SUM(MntGoldProds) AS Total FROM MARKETING_DATA
)
SELECT PRODUCT, TOTAL
FROM CTE
ORDER BY 2 DESC
LIMIT 5;

--Calculate the average number of children and teenagers in customers' households.

SELECT 'KIDS' AS KNT, COUNT(ID) AS TOTAL FROM MARKETING_DATA WHERE KIDHOME >1 
UNION
SELECT 'TEENS' AS KNT, COUNT(ID) AS TOTAL FROM MARKETING_DATA WHERE TEENHOME >1;


--Calculate the average recency (number of days since the last purchase) for customers.
SELECT CONCAT(ROUND(AVG(RECENCY),0), ' DAYS') AS AVG_GAP FROM MARKETING_DATA;


--Determine the acceptance rate for each campaign ('AcceptedCmp1' to 'AcceptedCmp5').
SELECT 
    ROUND(SUM(ACCEPTEDCMP1)/COUNT(*)*100,2) AS ACCEPTANCE_RATE1, 
    ROUND(SUM(ACCEPTEDCMP2)/COUNT(*)*100,2) AS ACCEPTANCE_RATE2,
    ROUND(SUM(ACCEPTEDCMP3)/COUNT(*)*100,2) AS ACCEPTANCE_RATE3,
    ROUND(SUM(ACCEPTEDCMP4)/COUNT(*)*100,2) AS ACCEPTANCE_RATE4,
    ROUND(SUM(ACCEPTEDCMP5)/COUNT(*)*100,2) AS ACCEPTANCE_RATE5,
    ROUND(SUM(RESPONSE)/COUNT(*)*100,2) AS FINAL_CMP
FROM MARKETING_DATA;

-- ALTERNATE WAY FOR COLUMN WISE
SELECT 'ACCEPTEDCMP1' AS CAMPAIGN, 
    ROUND(SUM(ACCEPTEDCMP1) / COUNT(*) * 100, 2) AS ACCEPTANCE_RATE
    FROM MARKETING_DATA
UNION
SELECT 'ACCEPTEDCMP2', 
    ROUND(SUM(ACCEPTEDCMP2) / COUNT(*) * 100, 2)
    FROM MARKETING_DATA
UNION
SELECT 'ACCEPTEDCMP3', 
    ROUND(SUM(ACCEPTEDCMP3) / COUNT(*) * 100, 2)
    FROM MARKETING_DATA
UNION
SELECT 'ACCEPTEDCMP4', 
    ROUND(SUM(ACCEPTEDCMP4) / COUNT(*) * 100, 2)
    FROM MARKETING_DATA
UNION
SELECT 'ACCEPTEDCMP5', 
    ROUND(SUM(ACCEPTEDCMP5) / COUNT(*) * 100, 2)
    FROM MARKETING_DATA
UNION
SELECT 'FINAL_CMP', 
    ROUND(SUM(RESPONSE) / COUNT(*) * 100, 2)
    FROM MARKETING_DATA;

--How many customers made purchases through the company's website ('NumWebPurchases')? 
--CUSTOMERS - // TIMES PURCHASE - 9053
-- CONVERSION FROM VISITS TO PURCHASEE = 76.81%

--TOTAL PURCHASES -- CREATING VIEW 
CREATE OR REPLACE VIEW TOTAL_PURCHASES AS (
SELECT ID, SUM(NUMWEBPURCHASES)+SUM(NUMCATALOGPURCHASES)+SUM(NUMSTOREPURCHASES) AS TOTAL_PUR
    FROM MARKETING_DATA
    GROUP BY 1
    ORDER BY 2 DESC);

SELECT * FROM  TOTAL_PURCHASES;
------------------
--TYPE OF PURCHASES AND PERCENTAGE SHARE CATEGORISED

SELECT 'TOTAL PURCHASE'AS CATEGORY, 
    SUM(TOTAL_PUR) AS VALUE --TOTAL PURCHASE SUMMING WEB,CATALOG, AND STORE
    FROM TOTAL_PURCHASES
UNION
SELECT 'CX ON WEB PURCHASE' , 
    COUNT(*)  -- COUNT OF CX WHO PURCHASED VIA WEB
    FROM MARKETING_DATA
    WHERE NUMWEBPURCHASES >0 
UNION
SELECT 'WEB PURCHASE', 
    SUM(NUMWEBPURCHASES) -- NO. OF TIMES PURCHASED
    FROM MARKETING_DATA
UNION
SELECT 'WEB PURCHASE LAST MNTH', 
    SUM(NUMWEBPURCHASES)  -- NO OF PURCHASE LAST MONTH
    FROM MARKETING_DATA
    WHERE RECENCY <=31
UNION
SELECT 'WEB VISITS LAST MNTH', 
    SUM(NUMWEBVISITSMONTH) -- NO. OF WEBSITE VISITS LAST MONTH
    FROM MARKETING_DATA
UNION
SELECT 'WEBVISIT_TO_PURCHAST_PCT',               --PERCENTAGE OF PURCHASE FROM WEB VISIT LAST MONTH     
    ROUND(SUM(CASE WHEN RECENCY <=31 THEN NUMWEBPURCHASES ELSE 0 END)/SUM(NUMWEBVISITSMONTH)*100,2) 
    FROM MARKETING_DATA
UNION
SELECT 'TOTAL_CAT_PURCHASE', 
    SUM(NUMCATALOGPURCHASES)  -- NO OF CATALOG PURCHASE
    FROM MARKETING_DATA
UNION
SELECT 'CATALOG_PUR_PCT', 
    ROUND(SUM(MD.NUMCATALOGPURCHASES)/SUM(TP.TOTAL_PUR)*100,2)  --PERCENTAGE OF CATALOG PURCHASE
    FROM MARKETING_DATA AS MD JOIN
    TOTAL_PURCHASES AS TP ON TP.ID = MD.ID
UNION
SELECT 'STORE_PURCHASE', 
    SUM(NUMSTOREPURCHASES)   -- NO OF STORE PURCHASES
    FROM MARKETING_DATA
UNION
SELECT 'STORE_PUR_PCT', 
    ROUND(SUM(MD.NUMSTOREPURCHASES)/SUM(TP.TOTAL_PUR)*100,2)  -- PERCENTAGE OF STORE PERCENTAGE
    FROM MARKETING_DATA AS MD JOIN
    TOTAL_PURCHASES AS TP ON TP.ID = MD.ID;



--Identify the most common marital status among customers.

SELECT 
    MARITAL_STATUS,
    COUNT(ID)
FROM MARKETING_DATA
    GROUP BY 1
    ORDER BY 2 DESC;


    ------------ REMOVING OUTLIERS IN INCOME

    SELECT MAX(INCOME), MIN(INCOME), AVG(INCOME), MEDIAN(INCOME), MODE(INCOME)
    FROM MARKETING_DATA;


    SELECT * FROM MARKETING_DATA 
    WHERE INCOME >= (SELECT AVG(INCOME)*3 FROM MARKETING_DATA);

--GETTIGN LOWER AND UPPER BOUND TO REMOVE OUTLIERS
--IQR	    LOWER_BOUND	    UPPER_BOUND
--33,219	-14,525.5	    118,350.5

CREATE VIEW PCTILE AS (
SELECT
    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY INCOME) AS Q1,
    PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY INCOME) AS Q2,
    PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY INCOME) AS Q3
FROM MARKETING_DATA
);

SELECT * FROM PCTILE;

CREATE VIEW BOUND AS (
SELECT 
    Q3-Q1 AS IQR,
    Q1-(1.5*IQR) AS LOWER_BOUND,
    Q3+(1.5*IQR) AS UPPER_BOUND
FROM PCTILE
);

--DELETING OUTLIERS WHERE INCOME IS GREATER THAN UPPER BOUND

DELETE FROM MARKETING_DATA
    WHERE INCOME >= (SELECT UPPER_BOUND FROM BOUND);

